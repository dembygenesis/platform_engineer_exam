// Code generated by counterfeiter. DO NOT EDIT.
package middlewaresfakes

import (
	"sync"

	"github.com/dembygenesis/platform_engineer_exam/models"
)

type FakeAuthFunctions struct {
	BasicAuthStub        func(string, string) (bool, *models.User, error)
	basicAuthMutex       sync.RWMutex
	basicAuthArgsForCall []struct {
		arg1 string
		arg2 string
	}
	basicAuthReturns struct {
		result1 bool
		result2 *models.User
		result3 error
	}
	basicAuthReturnsOnCall map[int]struct {
		result1 bool
		result2 *models.User
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthFunctions) BasicAuth(arg1 string, arg2 string) (bool, *models.User, error) {
	fake.basicAuthMutex.Lock()
	ret, specificReturn := fake.basicAuthReturnsOnCall[len(fake.basicAuthArgsForCall)]
	fake.basicAuthArgsForCall = append(fake.basicAuthArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.BasicAuthStub
	fakeReturns := fake.basicAuthReturns
	fake.recordInvocation("BasicAuth", []interface{}{arg1, arg2})
	fake.basicAuthMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAuthFunctions) BasicAuthCallCount() int {
	fake.basicAuthMutex.RLock()
	defer fake.basicAuthMutex.RUnlock()
	return len(fake.basicAuthArgsForCall)
}

func (fake *FakeAuthFunctions) BasicAuthCalls(stub func(string, string) (bool, *models.User, error)) {
	fake.basicAuthMutex.Lock()
	defer fake.basicAuthMutex.Unlock()
	fake.BasicAuthStub = stub
}

func (fake *FakeAuthFunctions) BasicAuthArgsForCall(i int) (string, string) {
	fake.basicAuthMutex.RLock()
	defer fake.basicAuthMutex.RUnlock()
	argsForCall := fake.basicAuthArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAuthFunctions) BasicAuthReturns(result1 bool, result2 *models.User, result3 error) {
	fake.basicAuthMutex.Lock()
	defer fake.basicAuthMutex.Unlock()
	fake.BasicAuthStub = nil
	fake.basicAuthReturns = struct {
		result1 bool
		result2 *models.User
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAuthFunctions) BasicAuthReturnsOnCall(i int, result1 bool, result2 *models.User, result3 error) {
	fake.basicAuthMutex.Lock()
	defer fake.basicAuthMutex.Unlock()
	fake.BasicAuthStub = nil
	if fake.basicAuthReturnsOnCall == nil {
		fake.basicAuthReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 *models.User
			result3 error
		})
	}
	fake.basicAuthReturnsOnCall[i] = struct {
		result1 bool
		result2 *models.User
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAuthFunctions) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.basicAuthMutex.RLock()
	defer fake.basicAuthMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthFunctions) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
